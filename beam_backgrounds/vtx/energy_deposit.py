import ROOT, argparse, glob, os, logging
ROOT.gROOT.SetBatch(True); ROOT.gStyle.SetOptStat(0)

"""
This script analyzes energy deposit data from ROOT files generated by the multi_analysis.py script.
It generates single plots for each dataset and comparison plots for specified datasets.
The single plots are stored in energy_deposit_analysis/single and the comparison plots in energy_deposit_analysis/comparison.
"""

ap = argparse.ArgumentParser()
ap.add_argument('--compare', nargs='+', type=str,
                help='dataset names (stems of *.root in output/) to overlay')
ap.add_argument('--indir',  default='output')
ap.add_argument('--outdir', default='energy_deposit_analysis')
args = ap.parse_args()

logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')
log = logging.getLogger('edepo')

layer_r = [14., 36., 58.]; nL = len(layer_r)
cols    = [ROOT.kRed, ROOT.kBlue, ROOT.kGreen+2, ROOT.kMagenta+2,
           ROOT.kOrange+7, ROOT.kCyan+2, ROOT.kViolet+7]

def load(ds):
    f = ROOT.TFile.Open(f'{args.indir}/{ds}.root')
    if not f or f.IsZombie(): log.warning(f'missing {ds}'); return None
    nev = f.Get('nEvents').GetVal()
    get = lambda n: f.Get(n).Clone()
    d   = dict(label=ds, nev=nev,
               energy     =get('energy'),
               dEdx       =get('dEdx'),
               dEdx_noSec =get('dEdx_noSec'))
    for h in (d['energy'],d['dEdx'],d['dEdx_noSec']): h.SetDirectory(0); h.Scale(1/nev)
    f.Close(); return d

os.makedirs(f'{args.outdir}/single',     exist_ok=True)
os.makedirs(f'{args.outdir}/comparison', exist_ok=True)

all_sets = [os.path.splitext(os.path.basename(p))[0]
            for p in glob.glob(f'{args.indir}/*.root')]
data = {s:load(s) for s in all_sets}; data = {k:v for k,v in data.items() if v}

# singles
for name,d in data.items():
    for L in range(nL):
        tag = f'{name}_L{L+1}'
        e  = d['energy']    .ProjectionY(f'e_{tag}',  L+1, L+1)
        x  = d['dEdx']      .ProjectionY(f'x_{tag}',  L+1, L+1)
        xp = d['dEdx_noSec'].ProjectionY(f'xp_{tag}', L+1, L+1)
        for h,stem,title,xmax in [
            (e ,'energy','Energy',200),
            (x ,'dEdx','dE/dx',1000),
            (xp,'dEdxP','dE/dx (no sec)',1000)
        ]:
            c=ROOT.TCanvas(); h.SetTitle(f'{title} Layer {L+1} ({name})')
            h.GetXaxis().SetTitle('Energy [keV]' if stem=='energy' else 'dE/dx [keV/mm]')
            h.GetYaxis().SetTitle('Hits / event'); h.GetXaxis().SetRangeUser(0,xmax)
            h.Draw('HIST'); c.SaveAs(f'{args.outdir}/single/{stem}_{tag}.png'); c.Close()

# comparison
if args.compare and len(args.compare)>=2:
    sel=[s for s in args.compare if s in data]
    if len(sel)<2: log.error('need â‰¥2 datasets for comparison'); exit()

    for key,title,xmax in [('energy','Energy',200),
                           ('dEdx','dE/dx',1000),
                           ('dEdx_noSec','dE/dx (no sec)',1000)]:
        for L in range(nL):
            c=ROOT.TCanvas(); leg=ROOT.TLegend(0.58,0.74,0.88,0.88)
            ymax=0
            for i,ds in enumerate(sel):
                h2=data[ds][key]; h=h2.ProjectionY(f'cmp_{key}_{ds}_{L}',L+1,L+1)
                h.SetLineColor(cols[i%len(cols)]); h.SetLineWidth(2)
                if i==0:
                    h.Draw('HIST'); first=h
                else: h.Draw('HIST SAME')
                leg.AddEntry(h,ds,'l'); ymax=max(ymax,h.GetMaximum())
            first.GetYaxis().SetRangeUser(0,ymax*1.15)
            first.GetXaxis().SetRangeUser(0,xmax)
            first.SetTitle(f'{title} Layer {L+1}')
            first.GetXaxis().SetTitle('Energy [keV]' if key=='energy' else 'dE/dx [keV/mm]')
            first.GetYaxis().SetTitle('Hits / event')
            leg.SetBorderSize(0); leg.SetFillStyle(0); leg.SetTextSize(0.03); leg.Draw()
            c.SaveAs(f'{args.outdir}/comparison/{key}_L{L+1}.png'); c.Close()
else:
    log.info('no comparison requested')
