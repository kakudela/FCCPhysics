import ROOT, argparse, os, glob, logging
ROOT.gROOT.SetBatch(True)
ROOT.gStyle.SetOptStat(0)

"""
This script plots hitmaps from ROOT files generated by the multi_analysis.py script.
It generates single plots for each dataset and comparison plots for specified datasets.
The single plots are stored in hitmaps_analysis/single and the comparison plots in hitmaps_analysis/comparison.
"""

logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")
log = logging.getLogger("hitmaps")

COL = [ROOT.kRed, ROOT.kBlue, ROOT.kGreen + 2, ROOT.kMagenta + 2,
       ROOT.kOrange + 7, ROOT.kCyan + 2, ROOT.kViolet + 7, ROOT.kGray + 2]

# helpers
def phi360(src):
    nb = src.GetNbinsX()
    h  = ROOT.TH1D(f"{src.GetName()}_360", "", nb, 0, 360)
    for b in range(1, nb + 1):
        x = src.GetXaxis().GetBinCenter(b); y = src.GetBinContent(b)
        if x < 0: x += 360
        h.Fill(x, y)
    h.SetDirectory(0); return h

def load(tag, indir):
    fn = f"{indir}/{tag}.root"
    if not os.path.exists(fn):
        log.warning(f"{fn} not found"); return None
    f   = ROOT.TFile(fn)
    nEv = f.Get("nEvents").GetVal() if f.Get("nEvents") else 1
    out = {}
    for k in f.GetListOfKeys():
        obj = f.Get(k.GetName())
        if isinstance(obj, (ROOT.TH1, ROOT.TH2)):
            h = obj.Clone(); h.SetDirectory(0); h.Scale(1.0 / nEv)
            out[h.GetName()] = h
    f.Close(); return out

ap = argparse.ArgumentParser()
ap.add_argument("--indir",  default="output")
ap.add_argument("--outDir", default="hitmaps_analysis")
ap.add_argument("--compare", nargs="+", help="dataset tags to overlay (e.g. 256 128)")
args = ap.parse_args()

single_dir     = f"{args.outDir}/single"
compare_dir    = f"{args.outDir}/comparison"
os.makedirs(single_dir,  exist_ok=True)
os.makedirs(compare_dir, exist_ok=True)

# discover datasets (use file stem)
tags  = [os.path.splitext(os.path.basename(x))[0] for x in glob.glob(f"{args.indir}/*.root")]
data  = {t: load(t, args.indir) for t in tags}
data  = {k:v for k,v in data.items() if v}

S_KEYS = ["layer", "phi_L0", "phi", "theta_L0", "theta", "z_L0", "z", "z_phi", "theta_phi"]          # single
C_KEYS = ["layer", "phi_L0", "phi", "theta_L0", "theta", "z_L0", "z"]                                # comparison

# single plots
for tag,hist in data.items():
    for key in S_KEYS:
        if key not in hist: continue
        h = hist[key]
        if key.startswith("phi"): h = phi360(h)
        c = ROOT.TCanvas()
        drawOpt = "COLZ" if isinstance(h, ROOT.TH2) else "HIST"
        h.Draw(drawOpt)
        h.SetTitle(f"{key} ({tag})")
        if key.startswith("z"):     h.GetXaxis().SetTitle("z (mm)")
        if key.startswith("theta"): h.GetXaxis().SetTitle("theta (deg)")
        if key.startswith("phi"):   h.GetXaxis().SetTitle("phi (deg)")
        if key == "layer":          h.GetXaxis().SetTitle("layer index")
        if isinstance(h, ROOT.TH1): h.GetYaxis().SetTitle("hits / event")
        c.SaveAs(f"{single_dir}/{key}_{tag}.png"); c.Close()

# comparison plots
if args.compare:
    cmp_tags = [t for t in args.compare if t in data]
    if not cmp_tags:
        log.error("no requested datasets found"); exit()

    for key in C_KEYS:
        if key not in data[cmp_tags[0]]: continue
        c = ROOT.TCanvas()
        drawn, ymax = [], 0
        for i,tag in enumerate(cmp_tags):
            hsrc = data[tag][key]
            h    = phi360(hsrc) if key.startswith("phi") else \
                   hsrc.Clone(f"{hsrc.GetName()}_{tag}")
            h.SetLineColor(COL[i % len(COL)])
            h.Draw("HIST" if not drawn else "HIST SAME")
            drawn.append(h); ymax = max(ymax, h.GetMaximum())
        first = drawn[0]
        first.GetYaxis().SetRangeUser(0, ymax * 1.15)
        first.SetTitle(f"{key} comparison")
        if key.startswith("z"):     first.GetXaxis().SetTitle("z (mm)")
        if key.startswith("theta"): first.GetXaxis().SetTitle("theta (deg)")
        if key.startswith("phi"):   first.GetXaxis().SetTitle("phi (deg)")
        if key == "layer":          first.GetXaxis().SetTitle("layer index")
        first.GetYaxis().SetTitle("hits / event")
        leg = ROOT.TLegend(0.65, 0.77, 0.92, 0.92)
        leg.SetBorderSize(0); leg.SetFillStyle(0); leg.SetTextSize(0.025)
        for h,tag in zip(drawn, cmp_tags): leg.AddEntry(h, tag, "l")
        leg.Draw()
        c.SaveAs(f"{compare_dir}/{key}_compare.png"); c.Close()
